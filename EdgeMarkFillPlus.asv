function tmpDem = EdgeMarkFillPlus(x, eps, perc,r_g)
% function y = EdgeMarkFillPlus(x, eps, perc)
% Performs the Edge, Mark and Fill Plus segmentation of a N-channel image.
% x     - source image
% eps   - margin for morphological marker seed dilation (def. 3)
% perc  - percentile for selection of spectral markers to split (def. 99%)
%

% Default parameter value
if nargin<3 || isempty(perc),
    perc = 99;
end

if nargin<2 || isempty(eps),
    eps = 3;
end
% bamr=double(amr);
% bedge=edgeMS(bamr);
% Computing Edges
x = double(x);
%edg = edgeMS(x);


% Or alternatively, using MATLAB's built-in round() function
binary_edges = round(r_g);


% start first watershed result show
% aa = double(x);
% edga = edgeMS(aa);
% edgPadded = padarray(edga, [1,1], 1);
% distancePaddeda = bwdist(edgPadded);
% distances =  distancePaddeda(2:end-1,2:end-1);
% dems = double(-distances);
% org = watershed_old(dems);
% 
% 
% % end
% 
% %Computing DEM For amr
% 
% BedgPadded = padarray(bedge, [1,1], 1);
% BdistancePadded = bwdist(BedgPadded);
% Bdistance =  BdistancePadded(2:end-1,2:end-1);
% Bdem = double(-Bdistance);

%End Computing DEM For amr

% Computing DEM
edgPadded = padarray(edg, [1,1], 1);
distancePadded = bwdist(edgPadded);
distance =  distancePadded(2:end-1,2:end-1);
dem = double(-distance);

% Computing Morphological Markers
morphoMarkers = MorphoMarkers(dem,eps);
% morphoMarkers2 = MorphoMarkers(Bdem,eps);
% morphoMarkers3=or(morphoMarkers,morphoMarkers2);
% 


% tmpDem2 = imimposemin(dem,morphoMarkers);
% tmpDem2(tmpDem2 == -inf) = min(dem(:)); %replace -inf for compatibility
% mm = watershed_old(tmpDem2);



% Computing Spectral Markers
% 2-step process:
% - compute pre-markers by dilating contours, isolating connected
% components and performing a first SFE for consistency
% - perform a segmentation locally to each connected components to enforce 
% spectral coherence, then perform SFE to extract final markers
%
% Step1

tmp = not(imdilate(edg,ones(3)));


preMarkers = ShedfitErosion(dem, bwlabel(tmp), 1);


%preMarkers=tmp;
% Step2
[mseimg, mse] = regionalMSE(x,preMarkers);
MSEth = percentile(mse,perc);
tmpMarkers = MarkerSegmentation(x, ...
    bwlabel(preMarkers .* (mseimg > MSEth)), 500, 0, 0);
tmpMarkers = max(max(bwlabel(preMarkers))).*(tmpMarkers>0) + ...
    tmpMarkers + bwlabel(preMarkers .* (mseimg <= MSEth));



spectralMarkers = ShedfitErosion(dem, tmpMarkers, 1);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%{
subplot(1,2,1);
imshow(tmpMarkers);
title('tmpMarkers ');


subplot(1,2,2);
imshow(spectralMarkers);
title('spectralMarkers Markers');
%}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
tmpDem = imimposemin(dem,or(morphoMarkers,spectralMarkers));
tmpDem(tmpDem == -inf) = min(dem(:)); %replace -inf for compatibility
